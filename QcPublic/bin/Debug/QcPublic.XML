<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QcPublic</name>
    </assembly>
    <members>
        <member name="P:QcPublic.QcNewNode.Code">
            <summary>
             编码
            </summary>
        </member>
        <member name="M:QcPublic.QcNewNode.Check(System.String)">
            <summary>
             检查已有数据的合法性
            </summary>
            <returns></returns>
        </member>
        <member name="F:QcPublic.QcNode.lstNode">
            <summary>
             存储所有Qcnode创建的对象
            </summary>
        </member>
        <member name="F:QcPublic.QcNode.m_Name">
            <summary>
             节点名称
            </summary>
        </member>
        <member name="P:QcPublic.QcNode.Code">
            <summary>
             编码
            </summary>
        </member>
        <member name="M:QcPublic.QcNode.Check(System.String)">
            <summary>
             检查已有数据的合法性
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcNode.Update(QcPublic.QcDbTransaction)">
            <summary>
             
            </summary>        
        </member>
        <member name="T:QcPublic.DynamicDataRowObject">
            <summary>
             动态的数据行包装类
            </summary>
        </member>
        <member name="P:QcPublic.DynamicDataRowObject.Row">
            <summary>
             对应的数据行
            </summary>
        </member>
        <member name="F:QcPublic.DynamicDataRowObject.tablename">
            <summary>
             表名
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QcPublic.DynamicDataRowObject.GetNewDataRow(System.String)" -->
        <member name="P:QcPublic.DynamicDataRowObject.Item(System.String)">
            <summary>
             虚拟的访问，使用字段名称作为索引访问
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.CheckNull(System.String)">
            <summary>
             检查指定的字段值是否为空
            </summary>
            <param name="field">字段名称</param>
            <returns>为空则返回字段名称和错误信息</returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.GetRow">
            <summary>
             返回当前的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.#ctor(System.Data.DataRow,System.String)">
            <summary>
             从指定的行构建一个动态对象
            </summary>
            <param name="row">数据行</param>
            <param name="tablename">数据表名</param>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
             动态访问数据元素的表
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            动态设置数据元素值
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.MakeUpdateSql">
            <summary>
             生成更新的sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.IsNew">
            <summary>
             判断是否为新建的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.IsEdit">
            <summary>
             判断是否发生了编辑更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.MakeDeleteSql">
            <summary>
            生成删除的sql语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.MakeInsertSql">
            <summary>
            生成插入语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.Refresh">
            <summary>
            刷新数据行，以获得一致性数据
            </summary>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.Update(QcPublic.QcDbTransaction)">
            <summary>
             更新数据到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicDataRowObject.DeleteFromDb(QcPublic.QcDbTransaction)">
            <summary>
             从数据库中删除数据行
            </summary>
            <param name="trans">事务支持类</param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.IniField">
            <summary>
             ini的一个区域
            </summary>
        </member>
        <member name="M:QcPublic.IniField.Add(System.String,System.String)">
            <summary>
             添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:QcPublic.IniField.SaveTo(System.Text.StringBuilder)">
            <summary>
             保存到我文件
            </summary>
            <param name="sb"></param>
        </member>
        <member name="P:QcPublic.IniField.Item(System.String)">
            <summary>
             键值索引访问
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.DynamicIniConfig">
            <summary>
             动态的ini访问类，可以使用区段名称和键值名称作为变量名访问
            </summary>
        </member>
        <member name="M:QcPublic.DynamicIniConfig.#ctor(System.String,System.Text.Encoding)">
            <summary>
             从文件创建ini，如果文件不存在会自动创建,读取时目前只识别 # 和;行的备注，识别空行并可以保存时保留
            </summary>
            <param name="inifilename"></param>
            <param name="encoding"></param>
        </member>
        <member name="T:QcPublic.DynamicXNode">
            <summary>
            功能待根据需求完善
            </summary>
        </member>
        <member name="T:QcPublic.DynamicTypeDescriptor">
            <summary>
             动态数据类描述器，可以包装工PropertyGrid显示
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor.RowObject">
            <summary>
             数据行对象
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor._readonlyfields">
            <summary>
             只读字段名称，特殊的提供 "" 空字符串将会让所有字段只读，!后面跟字段名称含义为不包含字符串为只读 = 则要求字段名称和其后完全相等才是只读
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor._diccatetory">
            <summary>
             分类列表，特殊的 ""空字符串会匹配所有的字段，放在字典列表最后可以把任意字段归类
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor._dicconverter">
            <summary>
             转换器，主要用于为字段提供特殊的转换器，一般是为日期字段提供dbnull支持，为选择输入字段提供输入选项
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor._defaultreadonly">
            <summary>
            默认只读属性
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor._defaultdiccatedory">
            <summary>
            默认的属性分类
            </summary>
        </member>
        <member name="F:QcPublic.DynamicTypeDescriptor._defaultconverter">
            <summary>
             默认的计分方式选择
            </summary>
        </member>
        <member name="M:QcPublic.DynamicTypeDescriptor.#ctor(QcPublic.DynamicDataRowObject,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.ComponentModel.TypeConverter})">
            <summary>
             构建一个动态数据类描述器
            </summary>
            <param name="DynamicObject">动态数据行对象</param>
            <param name="readonlyfields">只读字段集合</param>
            <param name="diccatetory">分类集合</param>
            <param name="dicconverter">转换器集合</param>
        </member>
        <member name="M:QcPublic.DynamicTypeDescriptor.SetReadOnly">
            <summary>
            设置为只读的
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicTypeDescriptor.GetComponentName">
            <summary>
            获取组件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.DynamicTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
             主要的属性包装过程
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.NullDateTimeTypeConverter">
            <summary>
             空日期支持转换器
             把当前日期，且小时为1的日期定义为空
            </summary>
        </member>
        <member name="T:QcPublic.DynamicPropertyDescriptor">
            <summary>
            属性描述器
            </summary>
        </member>
        <member name="M:QcPublic.DynamicPropertyDescriptor.#ctor(QcPublic.DynamicDataRowObject,System.String,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Boolean,System.Attribute[])">
            <summary>
            构建一个属性描述其
            </summary>
            <param name="row"></param>
            <param name="name"></param>
            <param name="readonlyflag"></param>
            <param name="catetory"></param>
            <param name="converter"></param>
        </member>
        <member name="P:QcPublic.DynamicPropertyDescriptor.Converter">
            <summary>
             类型转换器，特殊的日期类型值为空时会使用日期转换器
            </summary>
        </member>
        <member name="P:QcPublic.DynamicPropertyDescriptor.PropertyType">
            <summary>
             字段属性类型
            </summary>
        </member>
        <member name="M:QcPublic.DynamicPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
             设置字段值
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:QcPublic.DynamicPropertyDescriptor.GetValue(System.Object)">
            <summary>
             取得字段值
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:QcPublic.DynamicPropertyDescriptor.IsReadOnly">
            <summary>
             是否只读
            </summary>
        </member>
        <member name="T:QcPublic.QcCheckResult">
            <summary>
            数据检查结果类，为字段和字段检验结果的映射
            </summary>
        </member>
        <member name="F:QcPublic.QcCheckResult.m_CheckObject">
            <summary>
            被检查的对象
            </summary>
        </member>
        <member name="P:QcPublic.QcCheckResult.CheckObject">
            <summary>
             被检查的对象
            </summary>
        </member>
        <member name="M:QcPublic.QcCheckResult.#ctor(QcPublic.DynamicDataRowObject)">
            <summary>
            构建针对对象的检查结果
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:QcPublic.QcCheckResult.Add(System.String,System.String)">
            <summary>
            添加一条字段的错误信息
            </summary>
            <param name="field"></param>
            <param name="errormessage"></param>
        </member>
        <member name="M:QcPublic.QcCode.GetNextPartNumber(QcPublic.IQcNode,System.Collections.Generic.IEnumerable{QcPublic.IQcNode},System.Int32)">
            <summary>
             用于从指定的序列中，获取顺序号中的漏号用作编号，无漏号，则使用最后一个编号加1作为新的编号
            </summary>
            <param name="basenode">修改可以为空，用于支持用户管理的类编号</param>
            <param name="lst">同级别列表，用获取下一个可用的序号</param>
            <param name="partcodestart">编码开始位置</param>
            <returns></returns>
              
        </member>
        <member name="M:QcPublic.QcCode.GetNextNumber(System.String,System.Collections.Generic.IEnumerable{QcPublic.IQcNode},System.Int32,System.Int32,System.String)">
            <summary>
            获取下一个编号
            </summary>
            <param name="codeprefix"></param>
            <param name="lst"></param>
            <param name="partcodestart"></param>
            <param name="width"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.QcDbTransaction">
            <summary>
             数据库事物处理支持
            </summary>
        </member>
        <member name="M:QcPublic.QcDbTransaction.#ctor(System.Data.OleDb.OleDbConnection)">
            <summary>
            从一个数据库连接创建事务
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:QcPublic.QcDbTransaction.Execute(System.String)">
            <summary>
            使用事务执行一个sql语句
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcDbTransaction.RollBack">
            <summary>
            对事物进行回滚操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcDbTransaction.Commit">
            <summary>
             对事物进行提交操作
            </summary>
            <returns></returns>
        </member>
        <member name="F:QcPublic.HardDiskInfo.ModuleNumber">
            <summary>
            型号
            </summary>
        </member>
        <member name="F:QcPublic.HardDiskInfo.Firmware">
            <summary>
            固件版本
            </summary>
        </member>
        <member name="F:QcPublic.HardDiskInfo.SerialNumber">
            <summary>
            序列号
            </summary>
        </member>
        <member name="F:QcPublic.HardDiskInfo.Capacity">
            <summary>
            容量，以M为单位
            </summary>
        </member>
        <member name="T:QcPublic.QcDisk">
            <summary>
            ATAPI驱动器相关
            </summary>
        </member>
        <member name="M:QcPublic.QcDisk.CloseHandle(System.IntPtr)">
            <summary>
            感谢原作者的贡献，已经找到不园作者了
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcDisk.GetHddInfo(System.Byte)">
            <summary>
            获得硬盘信息
            </summary>
            <param name="driveIndex">硬盘序号</param>
            <returns>硬盘信息</returns>
            <remarks>
            参考lu0的文章：http://lu0s1.3322.org/App/2k1103.html
            by sunmast for everyone
            thanks lu0 for his great works
            在Windows 98/ME中，S.M.A.R.T并不缺省安装，请将SMARTVSD.VXD拷贝到%SYSTEM%/IOSUBSYS目录下。
            在Windows 2000/2003下，需要Administrators组的权限。
            </remarks>
            <example>
            AtapiDevice.GetHddInfo()
            </example>
        </member>
        <member name="M:QcPublic.QcCheckEntry.GetCheckEntry(System.String)">
            <summary>
            where 检查项编码 like=expr
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcCheckEntry.GetCheckEntrySql(System.String)">
            <summary>
            where expr is not null
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="P:QcPublic.QcErrorCode.Code">
            <summary>
             编码
            </summary>
        </member>
        <member name="M:QcPublic.QcErrorCode.Check(System.String)">
            <summary>
             检查已有数据的合法性
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcEvaCheckData.Statistics(System.Collections.Generic.IEnumerable{QcPublic.QcEvaDataRow})">
            <summary>
             计算中误差类别的分数
            </summary>
            <param name="m">检测中误差</param>
            <param name="m0">技术设计要求中误差</param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.QcLog.delegateLogEvent">
            <summary>
             挂接日志输出事件
            </summary>
            <param name="str"></param>
        </member>
        <member name="F:QcPublic.QcLog.lockobj">
            <summary>
             登记一个日志信息，当存在日志输出处理的函数时，会被输出到日志
            </summary>
            <param name="stri"></param>
        </member>
        <member name="P:QcPublic.IQcNode.Name">
            <summary>
             节点名称
            </summary>
        </member>
        <member name="P:QcPublic.IQcNode.Code">
            <summary>
             编码
            </summary>
        </member>
        <member name="P:QcPublic.IQcNode.Item(System.String)">
            <summary>
            获取制定字段的值
            </summary>
            <param name="Field"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.IQcNode.Check(System.String)">
            <summary>
             检查已有数据的合法性
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcMsgPoster.PostMeassage(System.String,System.String,System.String,QcPublic.NodeChangeType)">
            <summary>
            
            </summary>
            <param name="Code">数据编码值</param>
            <param name="TableName">表明</param>
            <param name="CodeField">数据编码字段名</param>
            <param name="ChangeType">变更类型</param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcProtect.GetHash32(System.String)">
            <summary>
            对原始数据进行MD5hash
            </summary>
            <param name="m_strSource">待hash数据</param>
            <returns>返回hash后的字符串编码</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.RSAEncrypt(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.RSADecrypt(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.SignatureFormatter(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.SignatureDeformatter(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.CreatePublicKeyXML(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.CreatePrivateKeyXML(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.ReadPublicKey(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:QcPublic.QcProtect.ReadPrivateKey(System.String)" -->
        <member name="P:QcPublic.QcCheckData.Code">
            <summary>
             编码
            </summary>
        </member>
        <member name="M:QcPublic.QcCheckData.Check(System.String)">
            <summary>
             检查已有数据的合法性
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcCheckData.ClearnAllCheckData">
            <summary>
            清除所有的检查数据，请谨慎使用该方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcCheckData.ClearnAllCheckData(QcPublic.QcJob)">
            <summary>
            清除当前作业的检查数据，请谨慎使用该方法
            </summary>
            <returns></returns>
        </member>
        <member name="F:QcPublic.QcCheckProjectDescriptor.catetory">
            <summary>
            默认的属性分类
            </summary>
        </member>
        <member name="M:QcPublic.QcCheckRule.GetCheckRule(System.String)">
            <summary>
            where expr is not null
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcJob.Get_CreatQuickJob(System.String)">
            <summary>
            根据启动类型自动创建系统作业，但缺省了方案ID，不成功时返回null
            </summary>
            <param name="starttype"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcJob.CreatQuickJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            根据名称，类型，方案创建作业，不成功时返回null
            </summary>
            <param name="jobname"></param>
            <param name="starttype"></param>
            <param name="chkprjid"></param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.QcProTaskJobDescriptor">
            <summary>
             项目，任务和Job的属性包装器,
             例外，可以输入编码
            </summary>
        </member>
        <member name="T:QcPublic.QcElementDescriptor">
            <summary>
             QcProductLevel属性包装器,
             例外，可以输入编码
            </summary>
        </member>
        <member name="T:QcPublic.QcProductLevelDescriptor">
            <summary>
             QcProductLevel属性包装器,
             例外，可以输入编码
            </summary>
        </member>
        <member name="M:QcPublic.QcDate.ToQcDateString(System.DateTime)">
            <summary>
            获取年-月-日 时:分:秒.毫秒 的格式
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcTask.Get_CreatQuickTask">
            <summary>
            系统获取或创建内置系统任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcEncrypt.Encode(System.String,System.Boolean)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:QcPublic.QcEncrypt.Decode(System.String,System.Boolean)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="P:QcPublic.QcDepartment.PartCode">
            <summary>
            角色编码
            </summary>
        </member>
        <member name="P:QcPublic.QcDepartment.PartName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:QcPublic.QcDepartment.PartContent">
            <summary>
             备注
            </summary>
        </member>
        <member name="M:QcPublic.QcDepartment.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="content"></param>
        </member>
        <member name="M:QcPublic.QcDepartment.Check(System.String)">
            <summary>
            检查指定的字段是否合法
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcDepartment.GetDepartmentFromCode(System.String)">
            <summary>
             从部门编码获取部门
            </summary>
            <param name="RoleCode">角色编码</param>
            <returns></returns>
        </member>
        <member name="P:QcPublic.QcPermissionEnum.PermisssionCode">
            <summary>
            权限编码
            </summary>
        </member>
        <member name="P:QcPublic.QcPermissionEnum.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:QcPublic.QcPermissionEnum.PermisssionEnum">
            <summary>
             权限枚举
            </summary>
        </member>
        <member name="P:QcPublic.QcPermissionEnum.Content">
            <summary>
             备注
            </summary>
        </member>
        <member name="M:QcPublic.QcPermissionEnum.#ctor(System.String,System.String,System.String)">
            <summary>
             创建权限类
            </summary>
            <param name="code">权限编码</param>
            <param name="type">操作类型</param>
            <param name="permissionenum">权限枚举</param>
            <param name="content">备注</param>
        </member>
        <member name="M:QcPublic.QcPermissionEnum.Check(System.String)">
            <summary>
            检查指定的字段是否合法
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcPermissionEnum.GetPermissionFromCode(System.String)">
            <summary>
             按照权限编码获取权限类
            </summary>
            <param name="PermissionCode"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcPermissionEnum.InitPermission">
            <summary>
            初始化权限列表，
            </summary>
        </member>
        <member name="M:QcPublic.QcPermissionEnum.Regsiter(System.String,System.String)">
            <summary>
            注册一个新的权限类型，可以直接调用，中程序请求该类程序验证时，会被创建到角色表
            </summary>
            <param name="name">权限枚举</param>
            <param name="optype">操作类型</param>
            <returns></returns>
        </member>
        <member name="P:QcPublic.QcRoleEnum.RoleCode">
            <summary>
            角色编码
            </summary>
        </member>
        <member name="P:QcPublic.QcRoleEnum.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:QcPublic.QcRoleEnum.RoleContent">
            <summary>
             备注
            </summary>
        </member>
        <member name="M:QcPublic.QcRoleEnum.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="code">角色编码</param>
            <param name="name">角色名称</param>
            <param name="content"> 备注</param>
        </member>
        <member name="M:QcPublic.QcRoleEnum.GetRoleFromCode(System.String)">
            <summary>
             从角色编码获取角色对象
            </summary>
            <param name="RoleCode">角色编码</param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcRoleEnum.GetRoleFromName(System.String)">
            <summary>
             从角色编码获取角色对象
            </summary>
            <param name="RoleCode">角色编码</param>
            <returns></returns>
        </member>
        <member name="P:QcPublic.QcUser.TableName">
            <summary>
             当前用户
            </summary>
        </member>
        <member name="P:QcPublic.QcUser.UserID">
            <summary>
            角色编码
            </summary>
        </member>
        <member name="P:QcPublic.QcUser.UserName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:QcPublic.QcUser.姓名">
            <summary>
             姓名
            </summary>
        </member>
        <member name="M:QcPublic.QcUser.#ctor(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="code">角色编码</param>
            <param name="name">角色名称</param>
            <param name="content"> 备注</param>
        </member>
        <member name="M:QcPublic.QcUser.HasPermission(System.String,System.String)">
            <summary>
            检测用户是否具有某种权限
            </summary>
            <param name="PermissionName"></param>
            <param name="optype"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcUser.Check(System.String)">
            <summary>
            检查指定的字段是否合法
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcUser.InitRoles">
            <summary>
            重载，完成分组编码和分组名称的转换
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcUser.GetUsersFromID(System.String)">
            <summary>
             从用户ID获取用户对象
            </summary>
            <param name="UsersCode">角色编码</param>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcUser.InitUsers">
            <summary>
            初始化用户信息到内存
            </summary>
        </member>
        <member name="M:QcPublic.QcUser.GetNextCode">
            <summary>
             获取下一个可用的编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcPublic.QcUser.LoginAs(System.String,System.String)">
            <summary>
            登录为用户
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:QcPublic.QcUserDescriptor">
            <summary>
             QcProductLevel属性包装器,
             例外，可以输入编码
            </summary>
        </member>
        <member name="M:QcPublic.SqlChecker.CheckKeyword(System.String)">
            <summary>
            检查指定的关键字是否包含sql语句的关键字，避免sql注入
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Sockets.SocketExtensions.SetKeepAlive(System.Net.Sockets.Socket,System.UInt64,System.UInt64)">
            <summary>
            Sets the keep-alive interval for the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="time">Time between two keep alive "pings".</param>
            <param name="interval">Time between two keep alive "pings" when first one fails.</param>
            <returns>If the keep alive infos were succefully modified.</returns>
        </member>
        <member name="M:QcNet.QcClientService.#ctor(System.Net.Sockets.Socket,QcNet.QcServer)">
            <summary>
             在一个网络连接上构建一个网络读取和写入流
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:QcNet.QcClientService.Send(System.String)">
            <summary>
             向网络接口发送数据
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:QcNet.QcClientService.Close">
            <summary>
             关闭连接
            </summary>
        </member>
        <member name="T:QcNet.NetEvent">
            <summary>
            网络通讯事件模型委托
            </summary>
        </member>
        <member name="T:QcNet.TcpServer">
             <summary>
             提供TCP连接服务的服务器类
             
             版本:  1.1
             替换版本: 1.0 
             
             特点:
             1.使用hash表保存所有已连接客户端的状态，收到数据时能实现快速查找.每当
             有一个新的客户端连接就会产生一个新的会话(Session).该Session代表了客
             户端对象.
             2.使用异步的Socket事件作为基础，完成网络通讯功能.
             3.支持带标记的数据报文格式的识别,以完成大数据报文的传输和适应恶劣的网
             络环境.初步规定该类支持的最大数据报文为640K(即一个数据包的大小不能大于
             640K,否则服务器程序会自动删除报文数据,认为是非法数据),防止因为数据报文
             无限制的增长而倒是服务器崩溃
             4.通讯格式默认使用Encoding.Default格式这样就可以和以前32位程序的客户端
             通讯.也可以使用U-16和U-8的的通讯方式进行.可以在该DatagramResolver类的
             继承类中重载编码和解码函数,自定义加密格式进行通讯.总之确保客户端与服务
             器端使用相同的通讯格式
             5.使用C# native code,将来出于效率的考虑可以将C++代码写成的32位dll来代替
             C#核心代码, 但这样做缺乏可移植性,而且是Unsafe代码(该类的C++代码也存在)
             6.可以限制服务器的最大登陆客户端数目
             7.比使用TcpListener提供更加精细的控制和更加强大异步数据传输的功能,可作为
             TcpListener的替代类
             8.使用异步通讯模式,完全不用担心通讯阻塞和线程问题,无须考虑通讯的细节
             
             注意:
             1.部分的代码由Rational XDE生成,可能与编码规范不符
             
             原理:
             
            
             使用用法:
             
             例子:
             
             </summary>
        </member>
        <member name="F:QcNet.TcpServer.DefaultMaxClient">
            <summary>
            默认的服务器最大连接客户端端数据
            </summary>
        </member>
        <member name="F:QcNet.TcpServer.DefaultBufferSize">
            <summary>
            接收数据缓冲区大小64K
            </summary>
        </member>
        <member name="F:QcNet.TcpServer.MaxDatagramSize">
            <summary>
            最大数据报文大小
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._resolver">
            <summary>
            报文解析器
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._coder">
            <summary>
            通讯格式编码解码器
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._port">
            <summary>
            服务器程序使用的端口
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._maxClient">
            <summary>
            服务器程序允许的最大客户端连接数
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._isRun">
            <summary>
            服务器的运行状态
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._recvDataBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._svrSock">
            <summary>
            服务器使用的异步Socket类,
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._sessionTable">
            <summary>
            保存所有客户端会话的哈希表
            </summary>
        </member>
        <member name="F:QcNet.TcpServer._clientCount">
            <summary>
            当前的连接的客户端数
            </summary>
        </member>
        <member name="E:QcNet.TcpServer.ClientConn">
            <summary>
            客户端建立连接事件
            </summary>
        </member>
        <member name="E:QcNet.TcpServer.ClientClose">
            <summary>
            客户端关闭事件
            </summary>
        </member>
        <member name="E:QcNet.TcpServer.ServerFull">
            <summary>
            服务器已经满事件
            </summary>
        </member>
        <member name="E:QcNet.TcpServer.ReceivedDatagram">
            <summary>
            服务器接收到数据事件
            </summary>
        </member>
        <member name="M:QcNet.TcpServer.#ctor(System.UInt16,System.Int32,QcNet.Coder)">
            <summary>
            构造函数
            </summary>
            <param name="port">服务器端监听的端口号</param>
            <param name="maxClient">服务器能容纳客户端的最大能力</param>
            <param name="encodingMothord">通讯的编码方式</param>
        </member>
        <member name="M:QcNet.TcpServer.#ctor(System.UInt16,System.Int32)">
            <summary>
            构造函数(默认使用Default编码方式)
            </summary>
            <param name="port">服务器端监听的端口号</param>
            <param name="maxClient">服务器能容纳客户端的最大能力</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QcNet.TcpServer.#ctor(System.UInt16)" -->
        <member name="P:QcNet.TcpServer.ServerSocket">
            <summary>
            服务器的Socket对象
            </summary>
        </member>
        <member name="P:QcNet.TcpServer.Resovlver">
            <summary>
            数据报文分析器
            </summary>
        </member>
        <member name="P:QcNet.TcpServer.SessionTable">
            <summary>
            客户端会话数组,保存所有的客户端,不允许对该数组的内容进行修改
            </summary>
        </member>
        <member name="P:QcNet.TcpServer.Capacity">
            <summary>
            服务器可以容纳客户端的最大能力
            </summary>
        </member>
        <member name="P:QcNet.TcpServer.SessionCount">
            <summary>
            当前的客户端连接数
            </summary>
        </member>
        <member name="P:QcNet.TcpServer.IsRun">
            <summary>
            服务器运行状态
            </summary>
        </member>
        <member name="M:QcNet.TcpServer.Start">
            <summary>
            启动服务器程序,开始监听客户端请求
            </summary>
        </member>
        <member name="M:QcNet.TcpServer.Stop">
            <summary>
            停止服务器程序,所有与客户端的连接将关闭
            </summary>
        </member>
        <member name="M:QcNet.TcpServer.CloseAllClient">
            <summary>
            关闭所有的客户端会话,与所有的客户端连接会断开
            </summary>
        </member>
        <member name="M:QcNet.TcpServer.CloseSession(QcNet.Session)">
            <summary>
            关闭一个与客户端之间的会话
            </summary>
            <param name="closeClient">需要关闭的客户端会话对象</param>
        </member>
        <member name="M:QcNet.TcpServer.Send(QcNet.Session,System.String)">
            <summary>
            发送数据
            </summary>
            <param name="recvDataClient">接收数据的客户端会话</param>
            <param name="datagram">数据报文</param>
        </member>
        <member name="M:QcNet.TcpServer.CloseClient(System.Net.Sockets.Socket,QcNet.Session.ExitType)">
            <summary>
            关闭一个客户端Socket,首先需要关闭Session
            </summary>
            <param name="client">目标Socket对象</param>
            <param name="exitType">客户端退出的类型</param>
        </member>
        <member name="M:QcNet.TcpServer.AcceptConn(System.IAsyncResult)">
            <summary>
            客户端连接处理函数
            </summary>
            <param name="iar">欲建立服务器连接的Socket对象</param>
        </member>
        <member name="M:QcNet.TcpServer.FindSession(System.Net.Sockets.Socket)">
            <summary>
            通过Socket对象查找Session对象
            </summary>
            <param name="client"></param>
            <returns>找到的Session对象,如果为null,说明并不存在该回话</returns>
        </member>
        <member name="M:QcNet.TcpServer.ReceiveData(System.IAsyncResult)">
            <summary>
            接受数据完成处理函数，异步的特性就体现在这个函数中，
            收到数据后，会自动解析为字符串报文
            </summary>
            <param name="iar">目标客户端Socket</param>
        </member>
        <member name="M:QcNet.TcpServer.SendDataEnd(System.IAsyncResult)">
            <summary>
            发送数据完成处理函数
            </summary>
            <param name="iar">目标客户端Socket</param>
        </member>
        <member name="T:QcNet.TcpClient">
             <summary>
             提供Tcp网络连接服务的客户端类
             
             版本:  1.0
             替换版本: 
            
             特征:
             原理:
             1.使用异步Socket通讯与服务器按照一定的通讯格式通讯,请注意与服务器的通
             讯格式一定要一致,否则可能造成服务器程序崩溃,整个问题没有克服,怎么从byte[]
             判断它的编码格式
             2.支持带标记的数据报文格式的识别,以完成大数据报文的传输和适应恶劣的网
             络环境.
             用法:
             注意:
             </summary>
        </member>
        <member name="F:QcNet.TcpClient._session">
            <summary>
            客户端与服务器之间的会话类
            </summary>
        </member>
        <member name="F:QcNet.TcpClient._isConnected">
            <summary>
            客户端是否已经连接服务器
            </summary>
        </member>
        <member name="F:QcNet.TcpClient.DefaultBufferSize">
            <summary>
            接收数据缓冲区大小64K
            </summary>
        </member>
        <member name="F:QcNet.TcpClient._resolver">
            <summary>
            报文解析器
            </summary>
        </member>
        <member name="F:QcNet.TcpClient._coder">
            <summary>
            通讯格式编码解码器
            </summary>
        </member>
        <member name="F:QcNet.TcpClient._recvDataBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="E:QcNet.TcpClient.ConnectedServer">
            <summary>
            已经连接服务器事件
            </summary>
        </member>
        <member name="E:QcNet.TcpClient.ReceivedDatagram">
            <summary>
            接收到数据报文事件
            </summary>
        </member>
        <member name="E:QcNet.TcpClient.DisConnectedServer">
            <summary>
            连接断开事件
            </summary>
        </member>
        <member name="P:QcNet.TcpClient.ClientSession">
            <summary>
            返回客户端与服务器之间的会话对象
            </summary>
        </member>
        <member name="P:QcNet.TcpClient.IsConnected">
            <summary>
            返回客户端与服务器之间的连接状态
            </summary>
        </member>
        <member name="P:QcNet.TcpClient.Resovlver">
            <summary>
            数据报文分析器
            </summary>
        </member>
        <member name="P:QcNet.TcpClient.ServerCoder">
            <summary>
            编码解码器
            </summary>
        </member>
        <member name="M:QcNet.TcpClient.#ctor">
            <summary>
            默认构造函数,使用默认的编码格式
            </summary>
        </member>
        <member name="M:QcNet.TcpClient.#ctor(QcNet.Coder)">
            <summary>
            构造函数,使用一个特定的编码器来初始化
            </summary>
            <param name="_coder">报文编码器</param>
        </member>
        <member name="M:QcNet.TcpClient.Connect(System.String,System.Int32)">
            <summary>
            连接服务器
            </summary>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口</param>
        </member>
        <member name="M:QcNet.TcpClient.Send(System.String)">
            <summary>
            发送数据报文
            </summary>
            <param name="datagram"></param>
        </member>
        <member name="M:QcNet.TcpClient.Send(System.Byte[])">
            <summary>
            发送数据报文
            </summary>
            <param name="datagram"></param>
        </member>
        <member name="M:QcNet.TcpClient.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:QcNet.TcpClient.SendDataEnd(System.IAsyncResult)">
            <summary>
            数据发送完成处理函数
            </summary>
            <param name="iar"></param>
        </member>
        <member name="M:QcNet.TcpClient.Connected(System.IAsyncResult)">
            <summary>
            建立Tcp连接后处理过程
            </summary>
            <param name="iar">异步Socket</param>
        </member>
        <member name="M:QcNet.TcpClient.RecvData(System.IAsyncResult)">
            <summary>
            数据接收处理函数
            </summary>
            <param name="iar">异步Socket</param>
        </member>
        <member name="T:QcNet.Coder">
            <summary>
            通讯编码格式提供者,为通讯服务提供编码和解码服务
            你可以在继承类中定制自己的编码方式如:数据加密传输等
            </summary>
        </member>
        <member name="F:QcNet.Coder._encodingMothord">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="M:QcNet.Coder.GetEncodingString(System.Byte[],System.Int32)">
            <summary>
            通讯数据解码
            </summary>
            <param name="dataBytes">需要解码的数据</param>
            <returns>编码后的数据</returns>
        </member>
        <member name="M:QcNet.Coder.GetEncodingBytes(System.String)">
            <summary>
            数据编码
            </summary>
            <param name="datagram">需要编码的报文</param>
            <returns>编码后的数据</returns>
        </member>
        <member name="T:QcNet.DatagramResolver">
            <summary>
            数据报文分析器,通过分析接收到的原始数据,得到完整的数据报文.
            继承该类可以实现自己的报文解析方法.
            通常的报文识别方法包括:固定长度,长度标记,标记符等方法
            本类的现实的是标记符的方法,你可以在继承类中实现其他的方法
            </summary>
        </member>
        <member name="F:QcNet.DatagramResolver.endTag">
            <summary>
            报文结束标记
            </summary>
        </member>
        <member name="P:QcNet.DatagramResolver.EndTag">
            <summary>
            返回结束标记
            </summary>
        </member>
        <member name="M:QcNet.DatagramResolver.#ctor">
            <summary>
            受保护的默认构造函数,提供给继承类使用
            </summary>
        </member>
        <member name="M:QcNet.DatagramResolver.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endTag">报文结束标记</param>
        </member>
        <member name="M:QcNet.DatagramResolver.Resolve(System.String@)">
            <summary>
            解析报文
            </summary>
            <param name="rawDatagram">原始数据,返回未使用的报文片断,
            该片断会保存在Session的Datagram对象中</param>
            <returns>报文数组,原始数据可能包含多个报文</returns>
        </member>
        <member name="T:QcNet.Session">
            <summary>
            客户端与服务器之间的会话类
            
            版本:  1.1
            替换版本: 1.0
            
            说明:
               会话类包含远程通讯端的状态,这些状态包括Socket,报文内容,
               客户端退出的类型(正常关闭,强制退出两种类型)
            </summary>
        </member>
        <member name="F:QcNet.Session._id">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="F:QcNet.Session._datagram">
            <summary>
            客户端发送到服务器的报文
            注意:在有些情况下报文可能只是报文的片断而不完整
            </summary>
        </member>
        <member name="F:QcNet.Session._cliSock">
            <summary>
            客户端的Socket
            </summary>
        </member>
        <member name="F:QcNet.Session._exitType">
            <summary>
            客户端的退出类型
            </summary>
        </member>
        <member name="T:QcNet.Session.ExitType">
            <summary>
            退出类型枚举
            </summary>
        </member>
        <member name="P:QcNet.Session.ID">
            <summary>
            返回会话的ID
            </summary>
        </member>
        <member name="P:QcNet.Session.Datagram">
            <summary>
            存取会话的报文
            </summary>
        </member>
        <member name="P:QcNet.Session.ClientSocket">
            <summary>
            获得与客户端会话关联的Socket对象
            </summary>
        </member>
        <member name="P:QcNet.Session.TypeOfExit">
            <summary>
            存取客户端的退出方式
            </summary>
        </member>
        <member name="M:QcNet.Session.GetHashCode">
            <summary>
            使用Socket对象的Handle值作为HashCode,它具有良好的线性特征.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcNet.Session.Equals(System.Object)">
            <summary>
            返回两个Session是否代表同一个客户端
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QcNet.Session.ToString">
            <summary>
            重载ToString()方法,返回Session对象的特征
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcNet.Session.#ctor(System.Net.Sockets.Socket)">
            <summary>
            构造函数
            </summary>
            <param name="cliSock">会话使用的Socket连接</param>
        </member>
        <member name="M:QcNet.Session.Close">
            <summary>
            关闭会话
            </summary>
        </member>
        <member name="T:QcNet.SessionId">
            <summary>
            唯一的标志一个Session,辅助Session对象在Hash表中完成特定功能
            </summary>
        </member>
        <member name="F:QcNet.SessionId._id">
            <summary>
            与Session对象的Socket对象的Handle值相同,必须用这个值来初始化它
            </summary>
        </member>
        <member name="P:QcNet.SessionId.ID">
            <summary>
            返回ID值
            </summary>
        </member>
        <member name="M:QcNet.SessionId.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="id">Socket的Handle值</param>
        </member>
        <member name="M:QcNet.SessionId.Equals(System.Object)">
            <summary>
            重载.为了符合Hashtable键值特征
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:QcNet.SessionId.GetHashCode">
            <summary>
            重载.为了符合Hashtable键值特征
            </summary>
            <returns></returns>
        </member>
        <member name="M:QcNet.SessionId.ToString">
            <summary>
            重载,为了方便显示输出
            </summary>
            <returns></returns>
        </member>
        <member name="T:QcNet.NetEventArgs">
            <summary>
            服务器程序的事件参数,包含了激发该事件的会话对象
            </summary>
        </member>
        <member name="F:QcNet.NetEventArgs._client">
            <summary>
            客户端与服务器之间的会话
            </summary>
        </member>
        <member name="M:QcNet.NetEventArgs.#ctor(QcNet.Session)">
            <summary>
            构造函数
            </summary>
            <param name="client">客户端会话</param>
        </member>
        <member name="P:QcNet.NetEventArgs.Client">
            <summary>
            获得激发该事件的会话对象
            </summary>
        </member>
        <member name="E:QcNet.QcClient.LogEvent">
            <summary>
             系统错误或者调试信息输出到日志，需要调用程序挂接事件进行最后处理
            </summary>
        </member>
        <member name="M:QcNet.QcClient.LogString(System.String)">
            <summary>
            
            </summary>
            <param name="stri"></param>
        </member>
        <member name="T:QcNet.QcCmd">
            <summary>
             文件传输通信的基本协议
            </summary>
        </member>
        <member name="M:QcNet.QcCmd.tokens(System.Int32)">
            <summary>
             获取消息包含的参数
            </summary>
            <param name="index">索引</param>
            <returns>参数内容文本</returns>
        </member>
        <member name="M:QcNet.QcCmd.MakeCmd(QcNet.QcProtocol.QcCommand,System.Object[])">
            <summary>
             生成一条消息
            </summary>
            <param name="msgtype">消息类别</param>
            <param name="args">消息参数</param>
            <returns>构建的消息字符串</returns>
        </member>
        <member name="M:QcNet.QcCoder.EncryptDES(System.Byte[])">
            <summary>
             des加密
            </summary>
            <param name="EncryptByteArray"></param>
            <returns></returns>
        </member>
        <member name="M:QcNet.QcCoder.DecryptDES(System.Byte[])">
            <summary>
             des解密
            </summary>
            <param name="EncryptByteArray"></param>
            <returns></returns>
        </member>
        <member name="M:QcNet.QcCoder.Compression(System.Byte[],System.IO.Compression.CompressionMode)">
            <summary>
             压缩解压
            </summary>
            <param name="data">待处理数据</param>
            <param name="mode">压缩和解压</param>
            <returns></returns>
        </member>
        <member name="F:QcNet.QcProtocol.QcCommand.QcMsg">
            <summary>
             QcMsg和QcUpdateMsg会被持久化到数据库，如果发送到目标用户，则设置标记已发
            </summary>
        </member>
        <member name="F:QcNet.QcProtocol.QcCommand.QcUpdateMsg">
            <summary>
            说明 文本消息为空则为更新类消息，不会被存入数据库
            数据格式：
             表名|数据ID|文本消息
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QcNet.QcServer.MessageInputHandler(System.String,System.Net.Sockets.SocketAsyncEventArgs,System.Int32)" -->
        <member name="M:QcNet.QcServer.ConnectionFilter(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            用户连接的代理
            </summary>
            <param name="socketAsync">连接的SOCKET</param>
            <returns>如果返回FALSE 则断开连接,这里注意下 可以用来封IP</returns>
        </member>
        <member name="M:QcNet.QcServer.BinaryInputHandler(System.Byte[],System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据包输入
            </summary>
            <param name="data">输入数据</param>
            <param name="socketAsync">该数据包的通讯SOCKET</param>
        </member>
        <member name="T:QcNet.QcSocketClient">
            <summary>
            ZYSOCKET 客户端
            （一个简单的异步SOCKET客户端，性能不错。支持.NET 3.0以上版本。适用于silverlight)
            </summary>
        </member>
        <member name="F:QcNet.QcSocketClient.sock">
            <summary>
            SOCKET对象
            </summary>
        </member>
        <member name="E:QcNet.QcSocketClient.Connection">
            <summary>
            连接成功事件
            </summary>
        </member>
        <member name="E:QcNet.QcSocketClient.DataOn">
            <summary>
            数据包进入事件
            </summary>
        </member>
        <member name="E:QcNet.QcSocketClient.Disconnection">
            <summary>
            出错或断开触发事件
            </summary>
        </member>
        <member name="M:QcNet.QcSocketClient.BeginConnectionTo(System.String,System.Int32)">
            <summary>
            异步连接到指定的服务器
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:QcNet.QcSocketClient.SendTo(System.Byte[])">
            <summary>
            发送数据包
            </summary>
            <param name="data"></param>
        </member>
    </members>
</doc>
